'use strict';

var fs = require('fs');
var path = require('path');
var loaderUtils = require('loader-utils');
var bootstrapper = fs.readFileSync(path.join(__dirname, 'bootstrapper.js'));
var getComponentName = function getComponentName(componentPath) {
  var componentPathSegments = componentPath.split('/');

  //return the second-to-last segment
  return componentPathSegments.slice(-2, -1)[0];
};
var getEntryComponentName = function getEntryComponentName(entryComponentPath) {
  var entryComponentPathSegments = entryComponentPath.split('/');

  //return the third segment
  return entryComponentPathSegments.slice(2, 3)[0];
};

module.exports = function (source) {
  var componentName = void 0;
  var entryComponentName = void 0;
  var componentIsNested = void 0;
  var togaComponentSource = source;

  this.value = togaComponentSource;
  this.cacheable && this.cacheable();
  try {
    componentName = getComponentName(loaderUtils.getRemainingRequest(this));
    entryComponentName = getEntryComponentName(this.options.entry.components[0]);
  } catch (e) {
    return source;
  }
  componentIsNested = entryComponentName !== componentName;
  if (typeof source === 'string' && !componentIsNested) {
    try {
      togaComponentSource = source.replace('module.exports', 'let togaComponentSource') + '\n        let togaComponentName="' + entryComponentName + '";\n        ' + bootstrapper.toString();
    } catch (e) {
      return source;
    }
  }
  this.value = togaComponentSource;

  return togaComponentSource;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQU0sS0FBSyxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU0sT0FBTyxRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU0sY0FBYyxRQUFRLGNBQVIsQ0FBcEI7QUFDQSxJQUFNLGVBQWUsR0FBRyxZQUFILENBQWdCLEtBQUssSUFBTCxDQUFVLFNBQVYsRUFBcUIsaUJBQXJCLENBQWhCLENBQXJCO0FBQ0EsSUFBTSxtQkFBbUIsU0FBbkIsZ0JBQW1CLENBQUMsYUFBRCxFQUFtQjtBQUMxQyxNQUFNLHdCQUF3QixjQUFjLEtBQWQsQ0FBb0IsR0FBcEIsQ0FBOUI7OztBQUdBLFNBQU8sc0JBQXNCLEtBQXRCLENBQTRCLENBQUMsQ0FBN0IsRUFBZ0MsQ0FBQyxDQUFqQyxFQUFvQyxDQUFwQyxDQUFQO0FBQ0QsQ0FMRDtBQU1BLElBQU0sd0JBQXdCLFNBQXhCLHFCQUF3QixDQUFDLGtCQUFELEVBQXdCO0FBQ3BELE1BQU0sNkJBQTZCLG1CQUFtQixLQUFuQixDQUF5QixHQUF6QixDQUFuQzs7O0FBR0EsU0FBTywyQkFBMkIsS0FBM0IsQ0FBaUMsQ0FBakMsRUFBb0MsQ0FBcEMsRUFBdUMsQ0FBdkMsQ0FBUDtBQUNELENBTEQ7O0FBT0EsT0FBTyxPQUFQLEdBQWlCLFVBQVMsTUFBVCxFQUFpQjtBQUNoQyxNQUFJLHNCQUFKO0FBQ0EsTUFBSSwyQkFBSjtBQUNBLE1BQUksMEJBQUo7QUFDQSxNQUFJLHNCQUFzQixNQUExQjs7QUFFQSxPQUFLLEtBQUwsR0FBYSxtQkFBYjtBQUNBLE9BQUssU0FBTCxJQUFrQixLQUFLLFNBQUwsRUFBbEI7QUFDQSxNQUFJO0FBQ0Ysb0JBQWdCLGlCQUFpQixZQUFZLG1CQUFaLENBQWdDLElBQWhDLENBQWpCLENBQWhCO0FBQ0EseUJBQXFCLHNCQUFzQixLQUFLLE9BQUwsQ0FBYSxLQUFiLENBQW1CLFVBQW5CLENBQThCLENBQTlCLENBQXRCLENBQXJCO0FBQ0QsR0FIRCxDQUlBLE9BQU8sQ0FBUCxFQUFVO0FBQ1IsV0FBTyxNQUFQO0FBQ0Q7QUFDRCxzQkFBb0IsdUJBQXVCLGFBQTNDO0FBQ0EsTUFBSSxPQUFPLE1BQVAsS0FBa0IsUUFBbEIsSUFBOEIsQ0FBQyxpQkFBbkMsRUFBc0Q7QUFDcEQsUUFBSTtBQUNGLDRCQUF5QixPQUFPLE9BQVAsQ0FBZSxnQkFBZixFQUFpQyx5QkFBakMsQ0FBekIseUNBQzRCLGtCQUQ1QixvQkFFSSxhQUFhLFFBQWIsRUFGSjtBQUdELEtBSkQsQ0FLQSxPQUFPLENBQVAsRUFBVTtBQUNSLGFBQU8sTUFBUDtBQUNEO0FBQ0Y7QUFDRCxPQUFLLEtBQUwsR0FBYSxtQkFBYjs7QUFFQSxTQUFPLG1CQUFQO0FBQ0QsQ0E3QkQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgbG9hZGVyVXRpbHMgPSByZXF1aXJlKCdsb2FkZXItdXRpbHMnKTtcbmNvbnN0IGJvb3RzdHJhcHBlciA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnYm9vdHN0cmFwcGVyLmpzJykpO1xuY29uc3QgZ2V0Q29tcG9uZW50TmFtZSA9IChjb21wb25lbnRQYXRoKSA9PiB7XG4gIGNvbnN0IGNvbXBvbmVudFBhdGhTZWdtZW50cyA9IGNvbXBvbmVudFBhdGguc3BsaXQoJy8nKTtcblxuICAvL3JldHVybiB0aGUgc2Vjb25kLXRvLWxhc3Qgc2VnbWVudFxuICByZXR1cm4gY29tcG9uZW50UGF0aFNlZ21lbnRzLnNsaWNlKC0yLCAtMSlbMF07XG59O1xuY29uc3QgZ2V0RW50cnlDb21wb25lbnROYW1lID0gKGVudHJ5Q29tcG9uZW50UGF0aCkgPT4ge1xuICBjb25zdCBlbnRyeUNvbXBvbmVudFBhdGhTZWdtZW50cyA9IGVudHJ5Q29tcG9uZW50UGF0aC5zcGxpdCgnLycpO1xuXG4gIC8vcmV0dXJuIHRoZSB0aGlyZCBzZWdtZW50XG4gIHJldHVybiBlbnRyeUNvbXBvbmVudFBhdGhTZWdtZW50cy5zbGljZSgyLCAzKVswXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc291cmNlKSB7XG4gIGxldCBjb21wb25lbnROYW1lO1xuICBsZXQgZW50cnlDb21wb25lbnROYW1lO1xuICBsZXQgY29tcG9uZW50SXNOZXN0ZWQ7XG4gIGxldCB0b2dhQ29tcG9uZW50U291cmNlID0gc291cmNlO1xuXG4gIHRoaXMudmFsdWUgPSB0b2dhQ29tcG9uZW50U291cmNlO1xuICB0aGlzLmNhY2hlYWJsZSAmJiB0aGlzLmNhY2hlYWJsZSgpO1xuICB0cnkge1xuICAgIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKGxvYWRlclV0aWxzLmdldFJlbWFpbmluZ1JlcXVlc3QodGhpcykpO1xuICAgIGVudHJ5Q29tcG9uZW50TmFtZSA9IGdldEVudHJ5Q29tcG9uZW50TmFtZSh0aGlzLm9wdGlvbnMuZW50cnkuY29tcG9uZW50c1swXSk7XG4gIH1cbiAgY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG4gIGNvbXBvbmVudElzTmVzdGVkID0gZW50cnlDb21wb25lbnROYW1lICE9PSBjb21wb25lbnROYW1lO1xuICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgJiYgIWNvbXBvbmVudElzTmVzdGVkKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRvZ2FDb21wb25lbnRTb3VyY2UgPSBgJHtzb3VyY2UucmVwbGFjZSgnbW9kdWxlLmV4cG9ydHMnLCAnbGV0IHRvZ2FDb21wb25lbnRTb3VyY2UnKX1cbiAgICAgICAgbGV0IHRvZ2FDb21wb25lbnROYW1lPVxcXCIke2VudHJ5Q29tcG9uZW50TmFtZX1cXFwiO1xuICAgICAgICAke2Jvb3RzdHJhcHBlci50b1N0cmluZygpfWA7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdG9nYUNvbXBvbmVudFNvdXJjZTtcblxuICByZXR1cm4gdG9nYUNvbXBvbmVudFNvdXJjZTtcbn07XG4iXX0=
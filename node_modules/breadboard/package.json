{
  "name": "breadboard",
  "version": "1.0.0",
  "description": "Lightweight IOC container for Node.js",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/ava/cli.js",
    "coverage": "nyc ./node_modules/ava/cli.js --all",
    "report": "npm run coverage && ./node_modules/.bin/nyc report --reporter=html",
    "codeclimate": "npm run coverage -- --reporter=lcov --reporter=text-lcov | ./node_modules/codeclimate-test-reporter/bin/codeclimate.js"
  },
  "author": {
    "name": "Marek Stasikowski and Simon Adcock",
    "email": "marekstasikowski+simonadcock@notonthehighstreet.com"
  },
  "license": "MIT",
  "dependencies": {
    "ava": "0.12.0",
    "debug": "2.2.0",
    "lodash": "4.5.1",
    "walk": "2.3.9"
  },
  "ava": {
    "files": [
      "**/*.spec.js"
    ]
  },
  "nyc": {
    "include": [
      "lib/**/*.js"
    ]
  },
  "devDependencies": {
    "codeclimate-test-reporter": "^0.3.1",
    "nyc": "^6.0.0",
    "sinon": "^1.17.3"
  },
  "gitHead": "abbea5d1402a25611956beb07277450062f91c7c",
  "readme": "![](http://i.imgur.com/3lFs20I.png)  \n# Breadboard\n\nBreadboard is an Inversion of Control container for Node.js applications.\n\nBreadboard will load all your application's dependencies, all Node library code\nand all of your application's modules into a `dependencies` object. The object is\nexposed to your application's modules by calling the modules as functions, passing the\ndependencies as an argument.\n\n## Install\n\n```\nnpm install breadboard\n```\n\n## Template for a module in your application\n\n```js\n\n//startServer.js\n\n// wrap module in factory function\nmodule.exports = (dependencies) => {\n\n  // collect third party dependencies for this module in the factory scope\n  const debug = dependencies['debug'];\n\n  // collect application module dependencies for this module. Keys are relative to `containerRoot`\n  const createServer = dependencies['/lib/createServer'];\n\n  // return the core functionality of the module\n  return () => {\n    const server = createServer();\n\n    server.listen(80, () => {\n      debug('Server listening on port 80');\n    });\n  };\n\n};\n```\n\nThe IoC should be initialised when your application is started:\n\n```js\n\nconst breadboard = require('breadboard');\n\nbreadboard({\n  entry: '/index',\n  containerRoot: 'app'\n}).then(() => {\n  console.log('Application started');\n});\n\n```\n\nThis returns a promise.\n\n### `entry`\n\nModule key for the entry point of the application. Will be executed after dependency injection has finished.\n\n### `containerRoot`\n\nroot directory of the application from which all module keys will be resolved\n",
  "readmeFilename": "README.md",
  "_id": "breadboard@1.0.0",
  "_shasum": "2d04b1caa80f99e4a79fbff990e3f80c829d9477",
  "_from": "git+ssh://git@github.com/notonthehighstreet/breadboard.git",
  "_resolved": "git+ssh://git@github.com/notonthehighstreet/breadboard.git#abbea5d1402a25611956beb07277450062f91c7c"
}
